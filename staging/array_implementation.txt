This is a computing riddle

Implement an array with the following API:
set(i, v) -> sets the i'th element to the value v
get(i) -> return the value of the i'th element
set_all(v) -> sets all values to v

size of the array is known.
make all operations O(1)

solution
we store a version number with every element.
First we have

construct_array()
	global_version=1
	gloval_value=0
	allocate the array with each element having both a value
	and a version
	(no need to initialize the array unless of course some cells
	have version=1 as a random value)

set(i,v)
	val[i]=v
	version[i]=global_version

get(i)
	if version[i]==global_version:
		return value[i]
	else:
		return global_value

set_all(v):
	global_version+=1
	global_value=v

The problem with this solution is that global_version will wrap around after 2^{32,31,64,63} operations.
To solve this we will, on every operation, execute this correction code:

	for(i=0;i<count;i++) {
		if(version[global_counter]<global_version-1 || version[global_counter]>>global_version) {
			version[global_counter]=global_version-1
		}
		global_counter+=1
		global_counter%=array_size
	}

	where 'count' is some small number.
