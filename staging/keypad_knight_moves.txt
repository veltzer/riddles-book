You are given a standard phone keypad:

	1 2 3
	4 5 6
	7 8 9
          0

And you need to write a function:

	knight_combinations(from, n)

which will return the number of 'n' knight moves starting
from the key 'from'

here are some examples:

	knight_combinations(1, 0) = 1
	knight_combinations(1, 1) = 2 (1,6) (1,8)
	knight_combinations(1, 2) = 5 (1,6,1) (1,6,7) (1,6,0) (1,8,1) (1,8,3)

Solution:
- we represents the adjaceny matrix of the generated graph as a 10x10 matrix of 0 and 1:
	0 at x,y: you cannot go from x to y
	1 at x,y: you can go from x to y

	0 1 2 3 4 5 6 7 8 9
	0 0 0 0 1 0 1 0 0 0 - from 0 you can go only to 4, 6
	0 0 0 0 0 0 1 0 1 0 - from 1 you can go only to 6, 8
	0 0 0 0 0 0 0 1 0 1 - from 2 you can go only to 7, 9
	0 0 0 0 1 0 0 0 1 0 - from 3 you can go only to 4, 8
	1 0 0 1 0 0 0 0 0 1 - from 4 you can go only to 3, 9, 0
	0 0 0 0 0 0 0 0 0 0 - from 5 you cant go anywhere.
	1 1 0 0 0 0 0 1 0 0 - from 6 you can go only to 1, 7, 0
	0 0 1 0 0 0 1 0 0 0 - from 7 you can go only to 2, 6
	0 1 0 1 0 0 0 0 0 0 - from 8 you can go only to 1, 3
	0 0 1 0 1 0 0 0 0 0 - from 9 you can go only to 2, 4

to find how many options are to get from 'from' in 'n' steps we raise the matrix
to the power of 'n' and sum the 'from' column.

simple.
